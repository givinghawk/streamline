name: Build and Release

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Update version for beta release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        shell: pwsh
        run: |
          $sha = "${{ github.sha }}".Substring(0, 7)
          
          # Get current version from package.json
          $packageJson = Get-Content package.json -Raw | ConvertFrom-Json
          $baseVersion = $packageJson.version
          
          # Create semver-compatible beta version
          $version = "$baseVersion-beta.$sha"
          
          # Update package.json
          $packageJson.version = $version
          $packageJson | ConvertTo-Json -Depth 100 | Set-Content package.json
          
          # Update package-lock.json
          $packageLockJson = Get-Content package-lock.json -Raw | ConvertFrom-Json
          $packageLockJson.version = $version
          $packageLockJson.packages."".version = $version
          $packageLockJson | ConvertTo-Json -Depth 100 | Set-Content package-lock.json
          
          Write-Host "Updated version to: $version"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Package application
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List release directory
        run: dir release
        shell: cmd

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            release/*.exe
            release/*.msi
          retention-days: 30
          if-no-files-found: warn

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Update version for beta release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Get current version from package.json
          BASE_VERSION=$(jq -r '.version' package.json)
          
          # Create semver-compatible beta version
          VERSION="$BASE_VERSION-beta.$SHA_SHORT"
          
          # Update package.json
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Update package-lock.json
          jq --arg version "$VERSION" '.version = $version | .packages[""].version = $version' package-lock.json > package-lock.json.tmp
          mv package-lock.json.tmp package-lock.json
          
          echo "Updated version to: $VERSION"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Package application
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List release directory
        run: ls -la release || echo "Release directory not found"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            release/*.dmg
            release/*.zip
          retention-days: 30
          if-no-files-found: warn

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Update version for beta release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Get current version from package.json
          BASE_VERSION=$(jq -r '.version' package.json)
          
          # Create semver-compatible beta version
          VERSION="$BASE_VERSION-beta.$SHA_SHORT"
          
          # Update package.json
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Update package-lock.json
          jq --arg version "$VERSION" '.version = $version | .packages[""].version = $version' package-lock.json > package-lock.json.tmp
          mv package-lock.json.tmp package-lock.json
          
          echo "Updated version to: $VERSION"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Package application
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List release directory
        run: ls -la release || echo "Release directory not found"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            release/*.AppImage
            release/*.deb
            release/*.rpm
          retention-days: 30
          if-no-files-found: warn

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: release-artifacts

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: release-artifacts

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: release-artifacts

      - name: Get short SHA
        id: vars
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Create Beta Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: beta-${{ steps.vars.outputs.sha_short }}
          name: Beta Build ${{ steps.vars.outputs.sha_short }}
          body: |
            Automated beta build from commit ${{ github.sha }}
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.event.head_commit.message }}
          files: release-artifacts/*
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Official Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
